// Pointer way of iterating through the scope chain, this works but requires unsafe
fn get(&self, token: &Token) -> Result<Option<Value>, RuntimeError> {
        // crate::loc!(format!("{:?}", self.values));
        let name = token.lexeme.clone();
        match self.borrow().values.get(&name) {
            Some(val) if *val == Value::Nil => Ok(None),
            Some(val) => Ok(Some(val.to_owned())),
            None => {
                let current_env = Rc::clone(&self);
                let current_env_ptr: *mut Environment = self.as_ptr();
                // We either find a value in enclosing scopes or none
                // no clue why this is caught as unused assignment
                // It was an unused assignment becz we never read the RHS ( = None )
                let scoped_val: Option<Value>;
                '_check_scopes: loop {
                    if let Some(encl_env) = &unsafe { &*current_env_ptr }.enclosing {
                        if let Ok(Some(val)) = encl_env.get(&token) {
                            break scoped_val = Some(val);
                        } else if let Ok(None) = encl_env.get(&token) {
                            // Variable declared but has Nil initializer
                            break scoped_val = None;
                        } else {
                            unsafe { std::ptr::swap(current_env_ptr, encl_env.as_ptr()) };
                            continue;
                        }
                    }
                    // No enclosing environment, current_env is global env
                    // Upto this we have not found the var declared
                    else {
                        assert!(
                            &unsafe { &*current_env_ptr }.is_global,
                            "ICE: Current env expected to be global at this point"
                        );
                        let global_env = unsafe { (*current_env_ptr).clone() };
                        match global_env.values.get(&name) {
                            Some(val) if *val == Value::Nil => return Ok(None),
                            Some(val) => return Ok(Some(val.to_owned())),
                            None => {
                                return Err(RuntimeError::UncaughtReference(
                                    token.clone(),
                                    format!("variable '{name}' is not defined"),
                                ))
                            }
                        }
                    }
                } // Loop ends at current_env = global scope
                return Ok(scoped_val);
            }
        }
    }

// Panicking get, this uses swap that may panic, but as of now, it does not
fn get(&self, token: &Token) -> Result<Option<Value>, RuntimeError> {
    // crate::loc!(format!("{:?}", self.values));
    let name = token.lexeme.clone();
    match self.borrow().values.get(&name) {
        Some(val) if *val == Value::Nil => Ok(None),
        Some(val) => Ok(Some(val.to_owned())),
        None => {
            let current_env: Rc<RefCell<Environment>> = Rc::clone(&self);
            // We either find a value in enclosing scopes or none
            // no clue why this is caught as unused assignment
            // It was an unused assignment becz we never read the RHS ( = None )
            let scoped_val: Option<Value>;
            '_check_scopes: loop {
                if let Some(ref encl_env) = current_env.borrow().enclosing {
                    if let Ok(Some(val)) = encl_env.get(&token) {
                        break scoped_val = Some(val);
                    } else if let Ok(None) = encl_env.get(&token) {
                        // Variable declared but has Nil initializer
                        break scoped_val = None;
                    } else {
                        current_env.swap(encl_env);
                        continue;
                    }
                }
                // No enclosing environment, current_env is global env
                // Upto this we have not found the var declared
                else {
                    assert!(
                        current_env.borrow().is_global,
                        "ICE: Current env expected to be global at this point"
                    );
                    let encl_borrow = current_env.borrow();
                    match encl_borrow.values.get(&name) {
                        Some(val) if *val == Value::Nil => return Ok(None),
                        Some(val) => return Ok(Some(val.to_owned())),
                        None => {
                            return Err(RuntimeError::UncaughtReference(
                                token.clone(),
                                format!("variable '{name}' is not defined"),
                            ))
                        }
                    }
                }
            } // Loop ends at current_env = global scope
            return Ok(scoped_val);
        }
    }
}