use std::{borrow::Cow, cell::RefCell, rc::Rc};

use crate::interpreter::Environment;

use super::error::EvalError;

pub type ValueResult = Result<Value, EvalError>;
/// A value generated by evaluating a Lox expression
#[derive(Debug, Default, PartialEq, Clone)]
pub enum Value {
    Function(LoxFunction),
    Break,
    Double(f64),
    Bool(bool),
    String(String),
    #[default]
    Nil,
}
impl Value {
    pub fn is_numeric(&self) -> Option<f64> {
        match self {
            Value::Double(d) => Some(*d),
            _ => None,
        }
    }
    pub fn is_string<'a>(&'a self) -> Option<Cow<'a, str>> {
        match self {
            Value::String(s) => Some(Cow::Borrowed(s)),
            _ => None,
        }
    }
    pub fn is_equal(&self, other: &Value) -> bool {
        self == other
    }
    /// Only false, and nil are falsey, rest everything else is truthy
    pub fn is_truthy(&self) -> bool {
        match self {
            Value::Bool(b) => *b,
            Value::Nil => false,
            _ => true,
        }
    }
}
impl std::cmp::PartialOrd for Value {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        use std::cmp::Ordering::*;
        match (self.is_numeric(), other.is_numeric()) {
            (Some(l), Some(r)) => l.partial_cmp(&r),
            _ => match (&self, &other) {
                (Value::Bool(l), Value::Bool(r)) => l.partial_cmp(&r),
                (Value::String(l), Value::String(r)) => l.partial_cmp(&r),
                (Value::Nil, Value::Bool(_)) => None, // We disallow nil to be compared against booleans, may change if needed
                (Value::Nil, Value::Nil) => Some(Equal),
                _ => None,
            },
        }
    }
}
impl std::fmt::Display for Value {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Value::Double(x) => write!(f, "{x}"),
            Value::Bool(x) => write!(f, "{x}"),
            Value::String(x) => write!(f, "\"{x}\""),
            Value::Nil => write!(f, "Nil"),
            Value::Break => write!(f, "BreakValue"),
            Value::Function(_) => todo!(),
        }
    }
}
impl From<bool> for Value {
    fn from(b: bool) -> Self {
        Self::Bool(b)
    }
}
impl From<String> for Value {
    fn from(x: String) -> Self {
        Self::String(x)
    }
}
impl From<f64> for Value {
    fn from(f: f64) -> Self {
        Self::Double(f)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct LoxFunction {
    pub stack_env: Rc<RefCell<Environment>>,
    pub name: String,
    pub args: Vec<Value>,
}
